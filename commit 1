import 'package:flutter/material.dart';
import 'dart:async';

void main() {
  runApp(MyApp()); // Inicia o aplicativo chamando o widget MyApp
}

class MyApp extends StatefulWidget {
  @override
  _MyAppState createState() => _MyAppState(); // Cria o estado do MyApp
}

class _MyAppState extends State<MyApp> {
  // Lista de perguntas e suas op√ß√µes/respostas corretas
  final List<Map<String, dynamic>> perguntas = [
    {
      'pergunta': "Quais os fundamentos do v√¥lei corretos descritos abaixo?",
      'opcoes': ['Manchete e toque', 'Observar e defender', 'Passe e defesa'],
      'respostacorreta': 'Passe e defesa',
    },
    {
      'pergunta': "Qual a principal fun√ß√£o de um central dentro de quadra?",
      'opcoes': ['Bloqueio', 'Ataque', 'Saque'],
      'respostacorreta': 'Bloqueio',
    },
    {
      'pergunta': "No rod√≠zio 6x0, qual a principal atividade do jogador que estar√° na 6?",
      'opcoes': ['Pinga', 'Fundo de quadra', 'Pipe'],
      'respostacorreta': 'Fundo de quadra',
    },
    {
      'pergunta': "No sistema de rota√ß√£o 5x1, qual jogador atua nas posi√ß√µes 6 e 4?",
      'opcoes': ['Central', 'Oposto', 'Ponteiro'],
      'respostacorreta': 'Ponteiro',
    },
    {
      'pergunta': "No sistema 5x1, em uma bola quebrada no fundo de quadra, na qual √© imposs√≠vel do levantador chegar, quem assume o levantamento?",
      'opcoes': ['Ponteiro', 'L√≠bero', 'Oposto'],
      'respostacorreta': 'L√≠bero',
    },
    {
      'pergunta': "O que um levantador evita fazer dentro de quadra?",
      'opcoes': ['Passar', 'Defender', 'Bloquear'],
      'respostacorreta': 'Passar',
    },
    {
      'pergunta': "Sobre as regras do V√¥lei de quadra, em que momento √© considerado dois toques?",
      'opcoes': ['Bloqueio', 'Passe', 'Levantamento'],
      'respostacorreta': 'Levantamento',
    },
    {
      'pergunta': "O que √© rally no v√¥lei?",
      'opcoes': [
        'Quando uma partida demora pra acabar',
        'Quando o l√≠bero pega uma bola quase imposs√≠vel',
        'Quando uma partida acaba muito r√°pido',
        'Nenhuma das anteriores'
      ],
      'respostacorreta': 'Nenhuma das anteriores',
    },
    {
      'pergunta': "Qual √© o objetivo principal do voleibol?",
      'opcoes': [
        'Fazer o m√°ximo de pontos poss√≠vel',
        'Impedir que a bola toque no ch√£o do pr√≥prio campo',
        'Fazer a bola tocar no ch√£o dentro do campo advers√°rio',
        'Nenhuma das anteriores'
      ],
      'respostacorreta': 'Fazer a bola tocar no ch√£o dentro do campo advers√°rio',
    },
    {
      'pergunta': "Qual √© a altura oficial da rede para homens e mulheres?",
      'opcoes': ['2,42 e 2,23', '2,40 e 2,24', '2,43 e 2,23', 'Nenhuma das anteriores'],
      'respostacorreta': 'Nenhuma das anteriores',
    },
  ];

  int perguntaAtual = 0; // Controla a pergunta atual
  int pontos = 0; // Conta a pontua√ß√£o do usu√°rio
  String? mensagem; // Mensagem a ser exibida ap√≥s a resposta
  bool quizFinalizado = false; // Controla o estado de finaliza√ß√£o do quiz
  Map<String, Color?> coresBotoes = {}; // Controla a cor dos bot√µes de resposta
  Timer? timer; // Timer do quiz
  int tempoRestante = 10; // Tempo restante para responder cada pergunta
  bool isTimerRunning = false; // Controla se o timer est√° rodando
  String imagemFeedback = ""; // Imagem de feedback ap√≥s a resposta
  double imagemOpacidade = 0; // Controla a opacidade da imagem de feedback

  // Fun√ß√£o para verificar a resposta do usu√°rio
  void verificarResposta(String respostaEscolhida) async {
    String respostaCorreta = perguntas[perguntaAtual]['respostacorreta'];

    setState(() {
      // Limpa a cor dos bot√µes antes de exibir o resultado
      coresBotoes = {};
      for (var opcao in perguntas[perguntaAtual]['opcoes']) {
        if (opcao == respostaCorreta) {
          coresBotoes[opcao] = Colors.green; // Resposta correta fica verde
        } else if (opcao == respostaEscolhida) {
          coresBotoes[opcao] = Colors.red; // Resposta errada fica vermelha
        }
      }

      bool acertou = respostaEscolhida == respostaCorreta; // Verifica se a resposta est√° correta
      bool perguntaImpar = (perguntaAtual + 1) % 2 != 0; // Verifica se a pergunta √© √≠mpar

      // Atualiza a pontua√ß√£o e a mensagem de feedback
      if (acertou) {
        pontos++;
        mensagem = '‚úÖ Resposta certa! +1 ponto';
        imagemFeedback = perguntaImpar
            ? 'https://i.imgur.com/DR8iaxB.png' // Imagem de feedback para pergunta √≠mpar
            : 'https://i.imgur.com/zbNG0dd.png'; // Imagem de feedback para pergunta par
      } else {
        mensagem = '‚ùå Resposta errada!';
        imagemFeedback = perguntaImpar
            ? 'https://i.imgur.com/Jjeh3Ne.png' // Imagem de feedback para pergunta √≠mpar (errada)
            : 'https://i.imgur.com/neU6P9W.png'; // Imagem de feedback para pergunta par (errada)
      }

      imagemOpacidade = 1; // Exibe a imagem de feedback
    });

    // Aguarda 2 segundos antes de mudar para a pr√≥xima pergunta
    await Future.delayed(Duration(seconds: 2));

    setState(() {
      mensagem = null; // Limpa a mensagem de feedback
      coresBotoes.clear(); // Limpa as cores dos bot√µes
      imagemOpacidade = 0; // Oculta a imagem de feedback
      if (perguntaAtual < perguntas.length - 1) {
        perguntaAtual++; // Avan√ßa para a pr√≥xima pergunta
      } else {
        quizFinalizado = true; // Finaliza o quiz se todas as perguntas foram respondidas
      }
    });

    if (!quizFinalizado) {
      resetTimer(); // Reinicia o timer
    }
  }

  // Fun√ß√£o para reiniciar o quiz
  void reiniciarQuiz() {
    setState(() {
      perguntas.shuffle(); // Embaralha as perguntas
      for (var pergunta in perguntas) {
        (pergunta['opcoes'] as List).shuffle(); // Embaralha as op√ß√µes de cada pergunta
      }
      perguntaAtual = 0; // Reinicia o contador de perguntas
      pontos = 0; // Reinicia a pontua√ß√£o
      quizFinalizado = false; // Reinicia o estado de finaliza√ß√£o do quiz
      mensagem = null; // Limpa a mensagem
      coresBotoes.clear(); // Limpa as cores dos bot√µes
      resetTimer(); // Reinicia o timer
    });
  }

  // Fun√ß√£o para iniciar o timer
  void startTimer() {
    setState(() {
      tempoRestante = 10; // Define o tempo inicial de 10 segundos
      isTimerRunning = true; // Indica que o timer est√° rodando
    });

    timer = Timer.periodic(Duration(seconds: 1), (Timer t) {
      setState(() {
        if (tempoRestante > 0) {
          tempoRestante--; // Decrementa o tempo restante
        } else {
          timer?.cancel(); // Cancela o timer quando o tempo chega a zero
          if (!quizFinalizado) {
            verificarResposta(''); // Verifica a resposta quando o tempo acaba
          }
        }
      });
    });
  }

  // Fun√ß√£o para resetar o timer
  void resetTimer() {
    if (timer?.isActive ?? false) {
      timer?.cancel(); // Cancela o timer ativo
    }
    startTimer(); // Inicia um novo timer
  }

  @override
  void initState() {
    super.initState();
    reiniciarQuiz(); // Reinicia o quiz assim que o app come√ßa
  }

  @override
  void dispose() {
    super.dispose();
    if (timer?.isActive ?? false) {
      timer?.cancel(); // Cancela o timer quando o app √© fechado
    }
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false, // Remove o banner de depura√ß√£o
      theme: ThemeData(
        primarySwatch: Colors.orange, // Cor principal do app
        scaffoldBackgroundColor: Color(0xFF1A237E), // Cor de fundo azul escuro
      ),
      home: Scaffold(
        appBar: AppBar(
          title: Text('üèê V√¥Quiz'), // T√≠tulo da app bar
          centerTitle: true, // Centraliza o t√≠tulo
        ),
        body: Center(
          child: Padding(
            padding: const EdgeInsets.all(16.0),
            child: quizFinalizado
                ? Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Icon(Icons.emoji_events, size: 80, color: Colors.orange),
                      SizedBox(height: 20),
                      Text(
                        'Parab√©ns!\nVoc√™ concluiu o quiz!',
                        textAlign: TextAlign.center,
                        style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
                      ),
                      SizedBox(height: 20),
                      Text('Pontua√ß√£o final: $pontos / ${perguntas.length}',
                          style: TextStyle(fontSize: 18)),
                      SizedBox(height: 30),
                      ElevatedButton(
                        onPressed: reiniciarQuiz, // Bot√£o para reiniciar o quiz
                        child: Text('üîÅ Recome√ßar'),
                        style: ElevatedButton.styleFrom(
                          padding: EdgeInsets.symmetric(horizontal: 30, vertical: 12),
                          backgroundColor: Colors.orange,
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(20),
                          ),
                        ),
                      ),
                    ],
                  )
                : Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      // Exibe a imagem de feedback se houver
                      if (imagemOpacidade > 0) ...[
                        AnimatedOpacity(
                          opacity: imagemOpacidade,
                          duration: Duration(milliseconds: 400),
                          child: AnimatedScale(
                            scale: imagemOpacidade,
                            duration: Duration(milliseconds: 400),
                            child: Image.network(imagemFeedback, height: 120),
                          ),
                        ),
                        SizedBox(height: 20),
                      ],
                      Text(
                        'Pergunta ${perguntaAtual + 1} de ${perguntas.length}',
                        style: TextStyle(fontSize: 16, color: Colors.grey[700]),
                      ),
                      SizedBox(height: 20),
                      AnimatedSwitcher(
                        duration: Duration(milliseconds: 500),
                        transitionBuilder: (child, animation) {
                          return SlideTransition(
                            position: Tween<Offset>( // Anima√ß√£o de transi√ß√£o
                              begin: Offset(1.0, 0.0),
                              end: Offset(0.0, 0.0),
                            ).animate(animation),
                            child: FadeTransition(opacity: animation, child: child),
                          );
                        },
                        child: Column(
                          key: ValueKey<int>(perguntaAtual), // Key para for√ßar a atualiza√ß√£o da anima√ß√£o
                          children: [
                            Card(
                              elevation: 5,
                              shape: RoundedRectangleBorder(
                                  borderRadius: BorderRadius.circular(15)),
                              child: Padding(
                                padding: const EdgeInsets.all(20.0),
                                child: Text(
                                  perguntas[perguntaAtual]['pergunta'], // Exibe a pergunta
                                  textAlign: TextAlign.center,
                                  style: TextStyle(
                                      fontSize: 20, fontWeight: FontWeight.bold),
                                ),
                              ),
                            ),
                          ],
                        ),
                      ),
                      SizedBox(height: 20),
                      ...perguntas[perguntaAtual]['opcoes'].map<Widget>((opcao) {
                        return Padding(
                          padding: const EdgeInsets.symmetric(vertical: 6.0),
                          child: ElevatedButton(
                            onPressed:
                                mensagem == null ? () => verificarResposta(opcao) : null, // Verifica a resposta ao clicar no bot√£o
                            child: Text(opcao, style: TextStyle(fontSize: 16)),
                            style: ElevatedButton.styleFrom(
                              backgroundColor:
                                  coresBotoes[opcao] ?? Colors.orange[300], // Define a cor do bot√£o conforme a resposta
                              foregroundColor: Colors.black,
                              minimumSize: Size(double.infinity, 48),
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(12),
                              ),
                            ),
                          ),
                        );
                      }).toList(),
                      if (mensagem != null) ...[
                        SizedBox(height: 20),
                        Text(
                          mensagem!,
                          style: TextStyle(
                            fontSize: 16,
                            fontWeight: FontWeight.bold,
                            color: mensagem!.contains('‚úÖ') ? Colors.green : Colors.red, // Define a cor da mensagem
                          ),
                        ),
                        SizedBox(height: 20),
                      ],
                      if (isTimerRunning) ...[
                        SizedBox(height: 20),
                        Text(
                          'Tempo restante: $tempoRestante', // Exibe o tempo restante
                          style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                        ),
                      ]
                    ],
                  ),
          ),
        ),
      ),
    );
  }
}
